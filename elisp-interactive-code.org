* Code Characters for `interactive'
  The code character descriptions below contain a number of key words, 
  defined here as follows:

  Completion
    Provide completion. <TAB>, <SPC>, and <RET> perform name 
	completion because the argument is read using `completing-read' 
	`?' displays a list of possible completions.

  Existing
    Require the name of an existing object. An invalid name is not 
	accepted; the commands to exit the minibuffer do not exit if the 
	current input is not valid.

  Default
    A default value of some sort is used if the user enters no text in 
	the minibuffer. The defaul depends on the code character.

  No I/O
    This code letter computes an argument without reading any input.
	Therefore, it does not use a prompt string, and any prompt string 
	you supply is ignored.
	Even though the code letter doesn't use a prompt string, you must 
	follow it with a newline if it is not the last code character in 
	the string.

  Prompt
    A prompt immediately follows the code character. The prompt ends 
	either with the end of the string or with a newline.

  Special
    A prompt immediately follows the code character. The prompt ends 
	either with the end of the string or with a newline.

** code character with `interactive'
*** `*'
   	Sinal an error if the current buffer is read-only. special.

	--elisp code--
	(defun ttt ()
	  (interactive "*")
	  (insert-string "ttt"))

*** TODO `@'
   	Select the window mentioned in the first mouse event in the key
   	sequence that invoked this command.

	Special.

*** TODO `^'
	If the command was invoked through shift-translation, set the mark 
	and activate the region temporarily, or extend an already active 
	region, before the command is run. If the command was invoked 
	without shift-translation, and the region is temporarily active,
	deactivate the region before the command is run.

	Special

*** `a'
   	A Function name(i.e., a symbol satisfying `fboundp')

   	Existing, Completion, Prompt

	--elisp code--
	(defun ttt (fun)
	  (interactive "aWhat function: ")
	  (message "%s is function" fun))

*** `b'
   	The name of an existing buffer. By default, uses the name of the 
   	current buffer.

   	Existing, Completion, Default, Prompt

	--elisp code--
	(defun ttt (buffer)
	  (interactive "bSelect Buffer: ")
	  (message "%s is selected" buffer))

*** `B'
	A buffer name. The buffer need not exist. By default, uses the 
	name of a recently used buffer other than the current buffer.

	Completion, Default, Prompt

	--elisp code--
	(defun ttt (buffer)
	  (interactive "BSelect Buffer: ")
	  (if (bufferp (get-buffer buffer))
        (message "%s is buffer" buffer)
		(message "%s isn't exist" buffer)))

*** `c'
	A character. The cursor does not move into the echo area.

	Prompt

	--elisp code--
	(defun ttt (c)
	  (interactive "cWaht? ")
	  (message "what is %c" c))

*** `C'
	A command name (i.e., a symbol satisfying `commandp'). 

	Existing, Completion, Prompt

	--elisp code--
	(defun ttt (command)
	  (interactive "CWhat? ")
	  (message "%s is command" command))

*** `d'
	The position of point, as an integer.

	No I/O

	(defun ttt (pos)
	  (interactive "d")
	  (message "position is %d" pos))

*** `D'
	A directory name. The default is the current default directory of 
	the current buffer, `default-directory'.

	Existing, Completion, Default, Prompt

	--elisp code--
	(defun ttt (directory)
	  (interactive "Dselect directory: ")
	  (message "directory is changed to %s" directory))

*** TODO `e'
	The first or next non-keyboard event in the key sequence that 
	invoked the command. More precisely, `e' gets events that are 
	lists, so you can look at the data in the lists.

	No I/O

	You use `e' for mouse events and for special system events.
	The event list that the command receives depends on the events. 
	Input Event, which describes the forms of the list for each 
	event in the correcponding subsections.

	You can use `e' more than once in a single command's interactive 
	specification. If the key sequence that invoked the command has N 
	events that are lists, the Nth `e' provides the Nth such event.
	Events that are not lists, such as function keys and ASCII 
	characters, do not count where `e' is concenred.

*** `f'
	A file name of an existing file. The default directory is 
	`default-directory'.

	Existing, Completion, Default, Prompt

	--elisp code--
	(defun ttt (file)
	  (interactive "fSelect File: ")
	  (message "%s is selected" file))

*** `F'
	A file name. The file need not exist.

	Completion, Default, Prompt

	--elisp code--
	(defun ttt (file)
	  (interactive "FSelect File: ")
	  (message "%s is selected" file))

*** `G'
	A file name. The file need not exist. If the user enters just a 
	directory name, then the value is just that directory name, with no 
	file name within the directory added. 

	Completion, Default, Prompt.

	--elisp code--
	(defun ttt (file)
	  (interactive "GSelect File: ")
	  (message "%s is selected" file))

*** TODO `i'
	An irrelevant argument. This code always supplies `nil' as the 
	argument's value

	No I/O

*** `k'
	A key sequence. This keeps reading events until a command (or undefined 
	command) is found in the current key maps. The key sequence argument is 
	represented as a string or vector. The cursor does not move into the 
	echo area.

	Prompt

	--elisp code--
	(defun ttt (key)
	  (interactive "k")
	  (message "key is %s" key))

*** `K'
	A key sequence, whose definition you intended to change. This works 
	like `k', except that it suppreses, for the last input event in 
	the key sequence, the conversions that are normally used (when 
	necessary) to convert an undefined key into a defined one.

	--elisp code--
	(defun ttt (key)
	  (interactive "K")
	  (message "key is %s" key))

*** `m'
	The position of the mark, as an integer. 

	No I/O

	--elisp code--
	(defun ttt (position)
	  "return position of the mark last setting"
	  (interactive "m")
	  (message "position is %d" position))

*** `M'
	Arbitrary text, read in the minibuffer using the current buffer's 
	input method, and returned as a string.

	Prompt

	--elisp code--
	(defun ttt (input)
	  (interactive "Minput: ")
	  (message "input is '%s'" input))

*** `n'
   	A number, read with the minibuffer. If the input is not a number, 
   	the user has to try again. `n' never uses the prefix argument.

   	Prompt

	--elisp code--
	(defun ttt (num)
	  (interactive "nInput Num? ")
	  (message "input number is %d" num))

*** TODO `p'
	The numeric prefix argument. (note that this `p' is low case.)

	No I/O

*** TODO `P'
	The raw prefix argument. (Note that this `P' is upper case.)

	No I/O

*** `r'
	Point and the mark, as two numeric argument, smallest first.
	This is the only code letter that specifies two successive 
	arguments rather than one.

	No I/O

	--elisp code--
	(defun ttt (beg end)
	  "point(현재 커서 위치), mark(마지막 세팅된 위치)"
	  (interactive "r")
	  (message "from %d to %d" beg end))

*** `s'
   	Arbitrary text, read in the minibuffer and returned as a string 
   	Terminate the input with either `C-j' or <RET>. (`C-j' may be 
   	used to include either of these characters in the input.)

   	Prompt

   	--elisp code--
   	(defun ttt (someone)
      (interactive "sWho? ")
      (message "Hello %s" someone))

*** `S'
   	An interned symbol whose name is read in the minibuffer. Terminate 
   	the input with either `C-j' or <RET>. Other characters that 
   	normally terminate a symbol (e.g., whitespace, parentheses and 
   	brackets) do not do so here.
   	
   	Prompt

   	--elisp code--
   	(defun ttt (input)
      (interactive "SInput? ")
      (if (symbolp input)
       	(message "%s is symbol" input)))

*** TODO `U'
	A key sequence or `nil'. Can be used after a `k' or `K' argument 
	to get the up-event that was discarded (if any) after `k' or 'K' 
	read a down-event. If no up-event has been discarded, `U' provides 
	`nil' as the argument.

	No I/O

*** `v'
	A variable declared to be a user option (i.e., satisfying the 
	predicate `custom-variable-p'). This reads the variable using 
	`read-variable'.

	Existing, Completion, Prompt

	--elisp code--
	(defun ttt (variable)
	  (interactive "vWhat? ")
	  (message "select variablel is '%s'" variable))

*** TODO `x'
	A Lisp object, specified with its read syntax, terminated with a 
	`C-j' or <RET>. The object is not evaluated.

	Prompt

*** TODO `X'
	A Lisp form's value. `X' reads as `x' does, then evaluates the 
	form so that its value becomes the argument for the command.

	Prompt

*** TODO `z'
	A coding system name(a symbol). If the user enters null input,
	the argument value is `nil'. 

	Completion, Existing, Prompt

*** TODO `Z'
	A coding system name (a symbol)--but only if this command has a 
	prefix argument. With no prefix argument, `Z' provides `nil' as 
	the argument value.

	Completion, Existing, Prompt

** misc
*** multiple input
	--elisp code--
   	(defun ttt (someone num)
      "multiple input using `\n'"
      (interactive "sWho? \nnHow many times? ")
      (dotimes (i num)
       	(insert (format "Hello %s!\n" someone))))

	--elisp code--
	(defun ttt (current new)
	  (interactive "d\nnNew?")
	  (message "current is %d, new is %d" current new))

	--elisp code--
	(defun ttt (directory)
	  "current directory is not read-only & input"
	  (interactive "*Dselect directory: ")
	  (message "directory is changed to %s" directory))
